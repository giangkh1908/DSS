import streamlit as st
import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from model.decision_model import DecisionModel
from view.dol_view import DolView

class DolController:
    """Controller for DOL (Degree of Operating Leverage) analysis"""
    
    def __init__(self):
        self.view = DolView()
        self.model = self._load_model()
        
        # Initialize session state for DOL
        if 'dol_results_data' not in st.session_state:
            st.session_state.dol_results_data = None
        if 'dol_current_page' not in st.session_state:
            st.session_state.dol_current_page = "input"
    
    @st.cache_resource
    def _load_model(_self):
        """Load the decision model with caching"""
        return DecisionModel()
    
    def run(self):
        """Main method to run DOL analysis"""
        self.view.render_header()
        data_path = st.session_state.get('uploaded_data_path', None)
        if data_path is None or not os.path.exists(data_path):
            st.warning("‚ö†Ô∏è Vui l√≤ng upload file d·ªØ li·ªáu ·ªü dashboard ƒë·ªÉ s·ª≠ d·ª•ng c√°c ch·ª©c nƒÉng ph√¢n t√≠ch!")
            return
        
        # Navigation
        page = self.view.render_navigation(
            st.session_state.dol_current_page,
            has_results=(st.session_state.dol_results_data is not None)
        )
        
        # Update current page
        st.session_state.dol_current_page = page
        
        # Route to appropriate page
        if page == "input":
            self._show_input_page()
        elif page == "results":
            self._show_results_page()
    
    def _show_input_page(self):
        """Display input page for DOL parameters"""
        self.view.render_input_header()
        
        # Get input data from view
        input_data = self.view.render_input_form(
            available_products=self.model.get_available_products(),
            available_years=self.model.get_available_years()
        )
        
        # Calculate button
        if self.view.render_calculate_button():
            if input_data['product_code']:
                self._calculate_dol(input_data)
            else:
                st.error("Vui l√≤ng ch·ªçn m·ªôt s·∫£n ph·∫©m.")
    
    def _show_results_page(self):
        """Display results page"""
        if st.session_state.dol_results_data is None:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu k·∫øt qu·∫£. Vui l√≤ng quay l·∫°i trang nh·∫≠p li·ªáu.")
            if st.button("Quay l·∫°i nh·∫≠p li·ªáu"):
                st.session_state.dol_current_page = "input"
                st.rerun()
            return
        
        results = st.session_state.dol_results_data
        
        # Back button
        if st.button("‚Üê Quay l·∫°i nh·∫≠p li·ªáu"):
            st.session_state.dol_current_page = "input"
            st.rerun()
        
        # Render results using view
        self.view.render_results_header()
        self.view.render_summary_table(results, self.model)
        self.view.render_dol_chart(results)
        self.view.render_detailed_analysis(results, self.model)
    
    def _calculate_dol(self, input_data):
        """Calculate DOL with the given input data"""
        with st.spinner("ƒêang t√≠nh to√°n DOL..."):
            try:
                results = self.model.calculate_dol(
                    variable_cost=input_data['variable_cost'],
                    fixed_cost=input_data['fixed_cost'],
                    time_period=input_data['time_period'],
                    product_code=input_data['product_code'],
                    selected_year=input_data['selected_year']
                )
                st.session_state.dol_results_data = results
                st.session_state.dol_current_page = "results"
                st.success("T√≠nh to√°n ho√†n t·∫•t!")
                st.rerun()
            except Exception as e:
                st.error(f"L·ªói khi t√≠nh to√°n: {str(e)}")
                
                # Show debug info
                with st.expander("üîß Th√¥ng tin Debug", expanded=False):
                    st.code(f"Chi ti·∫øt l·ªói: {str(e)}")
                    st.markdown("""
                    **C√≥ th·ªÉ do:**
                    1. S·∫£n ph·∫©m kh√¥ng c√≥ d·ªØ li·ªáu trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn
                    2. File d·ªØ li·ªáu kh√¥ng t·ªìn t·∫°i ho·∫∑c b·ªã l·ªói
                    3. Th√¥ng s·ªë ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá
                    4. L·ªói t√≠nh to√°n DOL (chia cho 0)
                    """)
    
    def reset_session(self):
        """Reset DOL session data"""
        st.session_state.dol_results_data = None
        st.session_state.dol_current_page = "input" 