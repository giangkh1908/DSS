"""
Controller t·ªïng th·ªÉ ƒë·ªÉ qu·∫£n l√Ω 3 ch·ª©c nƒÉng ch√≠nh c·ªßa ·ª©ng d·ª•ng DSS
"""

import streamlit as st
import sys
import os

# Th√™m ƒë∆∞·ªùng d·∫´n ƒë·ªÉ import
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

class AppController:
    """Controller ch√≠nh ƒëi·ªÅu ph·ªëi gi·ªØa 3 ch·ª©c nƒÉng"""
    
    def __init__(self):
        # Kh·ªüi t·∫°o session state n·∫øu ch∆∞a c√≥
        if 'current_mode' not in st.session_state:
            st.session_state.current_mode = None
        
    def run_application(self):
        """Ch·∫°y ·ª©ng d·ª•ng v·ªõi menu l·ª±a ch·ªçn ch·ª©c nƒÉng ho·∫∑c t·ª´ng ch·ª©c nƒÉng ri√™ng bi·ªát"""
        st.set_page_config(
            page_title="DSS - Decision Support System",
            page_icon="üìä",
            layout="wide",
            initial_sidebar_state="expanded"
        )

        # N·∫øu ch∆∞a ch·ªçn ch·ª©c nƒÉng, ch·ªâ hi·ªÉn th·ªã dashboard (header, ch·ªçn ch·ª©c nƒÉng, welcome, b·∫£ng so s√°nh, ...)
        if st.session_state.current_mode is None:
            self._render_dashboard()
        # N·∫øu ƒë√£ ch·ªçn ch·ª©c nƒÉng, ch·ªâ hi·ªÉn th·ªã UI c·ªßa ch·ª©c nƒÉng ƒë√≥ (kh√¥ng render dashboard/header/welcome)
        elif st.session_state.current_mode == "Ph√¢n b·ªï Ng√¢n s√°ch":
            self._run_budget_allocation_mode()
        elif st.session_state.current_mode == "Ph√¢n t√≠ch Doanh thu":
            self._run_revenue_analysis_mode()
        elif st.session_state.current_mode == "Ph√¢n t√≠ch Th√°ng":
            self._run_monthly_revenue_mode()
        elif st.session_state.current_mode == "Ph√¢n t√≠ch DOL":
            self._run_dol_analysis_mode()
    
    def _render_dashboard(self):
        """Render to√†n b·ªô dashboard, header, ch·ªçn ch·ª©c nƒÉng, welcome, b·∫£ng so s√°nh, ..."""
        # CSS t√πy ch·ªânh
        st.markdown("""
        <style>
        .main-header {
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            padding: 2rem;
            border-radius: 10px;
            margin-bottom: 2rem;
            text-align: center;
            color: white;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .feature-card {
            background: #f8f9fa;
            padding: 1.5rem;
            border-radius: 10px;
            border-left: 5px solid #667eea;
            margin: 1rem 0;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        .sidebar-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 1rem;
            border-radius: 10px;
            color: white;
            text-align: center;
            margin-bottom: 1rem;
        }
        .mode-selection {
            background: #f8f9fa;
            padding: 2rem;
            border-radius: 15px;
            margin: 2rem 0;
            border: 1px solid #e9ecef;
        }
        .mode-card {
            background: white;
            padding: 2rem;
            border-radius: 15px;
            border: 2px solid #e9ecef;
            text-align: center;
            margin-top: 1rem;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        .mode-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            transform: scaleX(0);
            transition: transform 0.3s ease;
        }
        .mode-card:hover::before {
            transform: scaleX(1);
        }
        .mode-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.2);
        }
        .mode-card.selected {
            border-color: #667eea;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
            transform: translateY(-3px);
        }
        .mode-card.selected::before {
            transform: scaleX(1);
            background: rgba(255, 255, 255, 0.3);
        }
        .mode-description {
            font-size: 1rem;
            line-height: 1.5;
            margin-bottom: 1rem;
        }
        .mode-features {
            font-size: 0.9rem;
            opacity: 0.8;
            line-height: 1.6;
            margin-top: 1rem;
        }
        .config-section {
            background: #f8f9fa;
            padding: 2rem;
            border-radius: 15px;
            margin: 1rem 0;
            border: 1px solid #e9ecef;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }
        .config-section h3 {
            color: #333;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #667eea;
        }
        @media (max-width: 768px) {
            .mode-card {
                margin: 0.5rem 0;
                padding: 1.5rem;
            }
            .main-header h1 {
                font-size: 1.8rem;
            }
        }
        </style>
        """, unsafe_allow_html=True)

        # Header ch√≠nh
        st.markdown("""
        <div class="main-header">
            <h1>üè¢ DSS - Decision Support System</h1>
            <p>H·ªá th·ªëng h·ªó tr·ª£ quy·∫øt ƒë·ªãnh cho Marketing v√† Ph√¢n t√≠ch Doanh thu</p>
        </div>
        """, unsafe_allow_html=True)

        # File uploader chung
        with st.container():
            st.markdown("### üìÅ Upload D·ªØ Li·ªáu Ph√¢n T√≠ch")
            if 'uploaded_data_path' not in st.session_state or not os.path.exists(st.session_state['uploaded_data_path']):
                uploaded_file = st.file_uploader(
                    "Ch·ªçn file CSV c·ªßa b·∫°n",
                    type=['csv'],
                    help="File c·∫ßn c√≥ c√°c c·ªôt: InvoiceDate, Country, CustomerID, Quantity, UnitPrice"
                )
                if uploaded_file is not None:
                    save_path = os.path.join('data', 'uploaded_data.csv')
                    with open(save_path, 'wb') as f:
                        f.write(uploaded_file.getbuffer())
                    st.session_state['uploaded_data_path'] = save_path
                    st.session_state['uploaded_file_name'] = uploaded_file.name
                    st.success(f"‚úÖ ƒê√£ upload: {uploaded_file.name}")
            else:
                file_name = st.session_state.get('uploaded_file_name', 'Ch∆∞a r√µ')
                col1, col2 = st.columns([8,1])
                with col1:
                    st.info(f"üìÇ ƒêang s·ª≠ d·ª•ng file: {file_name}")
                with col2:
                    if st.button("‚ùå", key="remove_uploaded_file", help="G·ª° file d·ªØ li·ªáu", use_container_width=True):
                        del st.session_state['uploaded_data_path']
                        if 'uploaded_file_name' in st.session_state:
                            del st.session_state['uploaded_file_name']
                        st.rerun()
                # Cho ph√©p upload l·∫°i file m·ªõi ngay c·∫£ khi ƒë√£ c√≥ file
                uploaded_file = st.file_uploader(
                    "Thay th·∫ø file CSV",
                    type=['csv'],
                    help="Upload file m·ªõi ƒë·ªÉ thay th·∫ø file hi·ªán t·∫°i"
                )
                if uploaded_file is not None:
                    save_path = os.path.join('data', 'uploaded_data.csv')
                    with open(save_path, 'wb') as f:
                        f.write(uploaded_file.getbuffer())
                    st.session_state['uploaded_data_path'] = save_path
                    st.session_state['uploaded_file_name'] = uploaded_file.name
                    st.success(f"‚úÖ ƒê√£ thay th·∫ø file: {uploaded_file.name}")

        # Header thanh ngang ƒë·ªÉ ch·ªçn ch·ª©c nƒÉng
        self._display_mode_selection()

        # Hi·ªÉn th·ªã m√†n h√¨nh h∆∞·ªõng d·∫´n, b·∫£ng so s√°nh, ...
        self._display_welcome_screen()
    
    def _display_mode_selection(self):
        """Hi·ªÉn th·ªã thanh ngang ƒë·ªÉ ch·ªçn ch·ª©c nƒÉng"""
        st.markdown("""
        <div class="mode-selection">
            <h2 style="text-align: center; color: #333; margin-bottom: 2rem;">
                üéØ Ch·ªçn Ch·ª©c nƒÉng
            </h2>
        </div>
        """, unsafe_allow_html=True)
        
        # T·∫°o 4 c·ªôt cho 4 ch·ª©c nƒÉng
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            # Hi·ªÉn th·ªã card cho ch·ª©c nƒÉng 1
            card_class = "selected" if st.session_state.current_mode == "Ph√¢n b·ªï Ng√¢n s√°ch" else ""
            
            # Container c√≥ th·ªÉ click ƒë∆∞·ª£c
            card_container = st.container()
            with card_container:
                if st.button(
                    "ü§ñ Ph√¢n b·ªï Ng√¢n s√°ch",
                    key="budget_mode",
                    help="Ch·ª©c nƒÉng ph√¢n b·ªï ng√¢n s√°ch v·ªõi AI",
                    use_container_width=True,
                    type="primary" if st.session_state.current_mode == "Ph√¢n b·ªï Ng√¢n s√°ch" else "secondary"
                ):
                    st.session_state.current_mode = "Ph√¢n b·ªï Ng√¢n s√°ch"
                    st.rerun()
                
                st.markdown(f"""
                <div class="mode-card {card_class}">
                    <div class="mode-description">
                        üíº Ph√¢n t√≠ch d·ªØ li·ªáu kh√°ch h√†ng v√† ƒë·ªÅ xu·∫•t ph√¢n b·ªï ng√¢n s√°ch t·ªëi ∆∞u
                    </div>
                    <div class="mode-features">
                        ‚úì Upload CSV data<br>
                        ‚úì Smart Recommendations<br>
                        ‚úì ROI Forecasting<br>
                        ‚úì Budget Optimization
                    </div>
                </div>
                """, unsafe_allow_html=True)
        
        with col2:
            # Hi·ªÉn th·ªã card cho ch·ª©c nƒÉng 2
            card_class = "selected" if st.session_state.current_mode == "Ph√¢n t√≠ch Doanh thu" else ""
            
            # Container c√≥ th·ªÉ click ƒë∆∞·ª£c
            card_container = st.container()
            with card_container:
                if st.button(
                    "üìà Ph√¢n t√≠ch Doanh thu",
                    key="revenue_mode", 
                    help="Ch·ª©c nƒÉng ph√¢n t√≠ch doanh thu theo qu·ªëc gia",
                    use_container_width=True,
                    type="primary" if st.session_state.current_mode == "Ph√¢n t√≠ch Doanh thu" else "secondary"
                ):
                    st.session_state.current_mode = "Ph√¢n t√≠ch Doanh thu"
                    st.rerun()
                
                st.markdown(f"""
                <div class="mode-card {card_class}">
                    <div class="mode-description">
                        üìä Ph√¢n t√≠ch doanh thu theo qu·ªëc gia v√† t√≠nh to√°n t·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng
                    </div>
                    <div class="mode-features">
                        ‚úì Country Analysis<br>
                        ‚úì Growth Rate Calculation<br>
                        ‚úì Revenue Comparison<br>
                        ‚úì Trend Forecasting
                    </div>
                </div>
                """, unsafe_allow_html=True)
        
        with col3:
            # Hi·ªÉn th·ªã card cho ch·ª©c nƒÉng 3 - Ph√¢n t√≠ch Th√°ng
            card_class = "selected" if st.session_state.current_mode == "Ph√¢n t√≠ch Th√°ng" else ""
            
            card_container = st.container()
            with card_container:
                if st.button(
                    "üìÖ Ph√¢n t√≠ch Th√°ng",
                    key="monthly_mode", 
                    help="Ph√¢n t√≠ch doanh thu theo t·ª´ng th√°ng",
                    use_container_width=True,
                    type="primary" if st.session_state.current_mode == "Ph√¢n t√≠ch Th√°ng" else "secondary"
                ):
                    st.session_state.current_mode = "Ph√¢n t√≠ch Th√°ng"
                    st.rerun()
                
                st.markdown(f"""
                <div class="mode-card {card_class}">
                    <div class="mode-description">
                        üìÖ Ph√¢n t√≠ch xu h∆∞·ªõng doanh thu theo t·ª´ng th√°ng
                    </div>
                    <div class="mode-features">
                        ‚úì Monthly Trends<br>
                        ‚úì Peak/Low Analysis<br>
                        ‚úì Seasonal Patterns<br>
                        ‚úì Strategic Insights
                    </div>
                </div>
                """, unsafe_allow_html=True)
        
        with col4:
            # Hi·ªÉn th·ªã card cho ch·ª©c nƒÉng 4 - Ph√¢n t√≠ch DOL
            card_class = "selected" if st.session_state.current_mode == "Ph√¢n t√≠ch DOL" else ""
            
            card_container = st.container()
            with card_container:
                if st.button(
                    "üî¢ Ph√¢n t√≠ch DOL",
                    key="dol_mode", 
                    help="Ph√¢n t√≠ch Degree of Operating Leverage",
                    use_container_width=True,
                    type="primary" if st.session_state.current_mode == "Ph√¢n t√≠ch DOL" else "secondary"
                ):
                    st.session_state.current_mode = "Ph√¢n t√≠ch DOL"
                    st.rerun()
                
                st.markdown(f"""
                <div class="mode-card {card_class}">
                    <div class="mode-description">
                        üî¢ Ph√¢n t√≠ch ƒë·ªô nh·∫°y c·∫£m ho·∫°t ƒë·ªông v√† d·ª± b√°o DOL
                    </div>
                    <div class="mode-features">
                        ‚úì DOL Calculation<br>
                        ‚úì Monthly Analysis<br>
                        ‚úì Sensitivity Analysis<br>
                        ‚úì Strategic Recommendations
                    </div>
                </div>
                """, unsafe_allow_html=True)
        
        # Hi·ªÉn th·ªã th√¥ng tin b·ªï sung n·∫øu ƒë√£ ch·ªçn
        if st.session_state.current_mode == "Ph√¢n b·ªï Ng√¢n s√°ch":
            st.info("ü§ñ **Ch·∫ø ƒë·ªô:** Ph√¢n b·ªï Ng√¢n s√°ch - Upload file CSV ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch")
        elif st.session_state.current_mode == "Ph√¢n t√≠ch Doanh thu":
            st.info("üìà **Ch·∫ø ƒë·ªô:** Ph√¢n t√≠ch Doanh thu - Upload file d·ªØ li·ªáu b√°n h√†ng ƒë·ªÉ ph√¢n t√≠ch")
        elif st.session_state.current_mode == "Ph√¢n t√≠ch Th√°ng":
            st.info("üìÖ **Ch·∫ø ƒë·ªô:** Ph√¢n t√≠ch Th√°ng - Ph√¢n t√≠ch xu h∆∞·ªõng doanh thu theo th√°ng")
        elif st.session_state.current_mode == "Ph√¢n t√≠ch DOL":
            st.info("üî¢ **Ch·∫ø ƒë·ªô:** Ph√¢n t√≠ch DOL - T√≠nh to√°n ƒë·ªô nh·∫°y c·∫£m ho·∫°t ƒë·ªông v√† d·ª± b√°o")
    
    def _display_welcome_screen(self):
        """Hi·ªÉn th·ªã m√†n h√¨nh h∆∞·ªõng d·∫´n"""
        if st.session_state.current_mode is None:
            st.markdown("""
            ### üëã Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi DSS - Decision Support System
            
            Vui l√≤ng ch·ªçn m·ªôt trong b·ªën ch·ª©c nƒÉng ph√≠a tr√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu:
            """)
        
        st.markdown("---")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown("""
            <div class="feature-card">
                <h3>ü§ñ Chi ti·∫øt Ph√¢n b·ªï Ng√¢n s√°ch</h3>
                <p><strong>Quy tr√¨nh l√†m vi·ªác:</strong></p>
                <ol>
                    <li>Upload file CSV d·ªØ li·ªáu kh√°ch h√†ng</li>
                    <li>C·∫•u h√¨nh th·ªùi gian v√† ng√¢n s√°ch</li>
                    <li>Ch·ªçn ti√™u ch√≠ l·ªçc qu·ªëc gia</li>
                    <li>Ph√¢n t√≠ch v√† ƒë·ªÅ xu·∫•t</li>
                    <li>Xu·∫•t b√°o c√°o k·∫øt qu·∫£</li>
                </ol>
                <p><strong>Format d·ªØ li·ªáu c·∫ßn:</strong></p>
                <code>InvoiceDate, Country, CustomerID, Quantity, UnitPrice</code>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div class="feature-card">
                <h3>üìà Chi ti·∫øt Ph√¢n t√≠ch Doanh thu</h3>
                <p><strong>Quy tr√¨nh l√†m vi·ªác:</strong></p>
                <ol>
                    <li>Upload file CSV/Excel doanh thu</li>
                    <li>Ch·ªçn kho·∫£ng th·ªùi gian ph√¢n t√≠ch</li>
                    <li>L·ªçc qu·ªëc gia v√† ng∆∞·ª°ng doanh thu</li>
                    <li>Ch·ªçn lo·∫°i ph√¢n t√≠ch c·∫ßn thi·∫øt</li>
                    <li>Xem k·∫øt qu·∫£ v√† d·ª± b√°o</li>
                </ol>
                <p><strong>Format d·ªØ li·ªáu c·∫ßn:</strong></p>
                <code>InvoiceDate, Country, Revenue</code>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown("""
            <div class="feature-card">
                <h3>üìÖ Chi ti·∫øt Ph√¢n t√≠ch Th√°ng</h3>
                <p><strong>Quy tr√¨nh l√†m vi·ªác:</strong></p>
                <ol>
                    <li>Upload file CSV d·ªØ li·ªáu b√°n h√†ng</li>
                    <li>Ch·ªçn s·∫£n ph·∫©m c·∫ßn ph√¢n t√≠ch</li>
                    <li>Thi·∫øt l·∫≠p kho·∫£ng th·ªùi gian</li>
                    <li>Xem bi·ªÉu ƒë·ªì xu h∆∞·ªõng theo th√°ng</li>
                    <li>Nh·∫≠n g·ª£i √Ω chi·∫øn l∆∞·ª£c kinh doanh</li>
                </ol>
                <p><strong>Format d·ªØ li·ªáu c·∫ßn:</strong></p>
                <code>InvoiceDate, Description, Quantity, UnitPrice</code>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            st.markdown("""
            <div class="feature-card">
                <h3>üî¢ Chi ti·∫øt Ph√¢n t√≠ch DOL</h3>
                <p><strong>Quy tr√¨nh l√†m vi·ªác:</strong></p>
                <ol>
                    <li>Nh·∫≠p chi ph√≠ bi·∫øn ƒë·ªïi v√† c·ªë ƒë·ªãnh</li>
                    <li>Ch·ªçn s·∫£n ph·∫©m v√† kho·∫£ng th·ªùi gian</li>
                    <li>T√≠nh to√°n DOL v√† ƒë·ªô nh·∫°y c·∫£m</li>
                    <li>Xem bi·ªÉu ƒë·ªì xu h∆∞·ªõng theo th√°ng</li>
                    <li>Nh·∫≠n khuy·∫øn ngh·ªã chi·∫øn l∆∞·ª£c</li>
                </ol>
                <p><strong>Format d·ªØ li·ªáu c·∫ßn:</strong></p>
                <code>InvoiceDate, StockCode, Quantity, UnitPrice</code>
            </div>
            """, unsafe_allow_html=True)
        
        st.markdown("---")
        st.markdown("""
        ### üìä So s√°nh T√≠nh nƒÉng
        
        | T√≠nh nƒÉng | Ph√¢n b·ªï Ng√¢n s√°ch | Ph√¢n t√≠ch Doanh thu | Ph√¢n t√≠ch Th√°ng | Ph√¢n t√≠ch DOL |
        |-----------|---------------------|-------------------|----------------|-------------|
        | **ƒê·ªëi t∆∞·ª£ng** | Marketing Manager | Sales Analyst | Business Analyst | Financial Analyst |
        | **Input** | Customer Data CSV | Revenue Data CSV/Excel | Sales Data CSV | Cost & Product Data |
        | **AI Support** | ‚úÖ Smart Recommendations | ‚úÖ Trend Analysis | ‚úÖ Pattern Recognition | ‚úÖ Sensitivity Analysis |
        | **Output** | Budget Allocation Plan | Revenue Analysis Report | Monthly Trend Report | DOL Analysis Report |
        | **Forecasting** | ROI Prediction | Growth Rate Prediction | Seasonal Forecasting | Leverage Forecasting |
        """)
        
        # Hi·ªÉn th·ªã th√¥ng tin h·ªá th·ªëng
        with st.expander("‚ÑπÔ∏è Th√¥ng tin H·ªá th·ªëng", expanded=False):
            st.markdown("""
            **Phi√™n b·∫£n:** 2.0  
            **Ki·∫øn tr√∫c:** MVC (Model-View-Controller)  
            **C√¥ng ngh·ªá:** Streamlit + AI Integration  
            **C·∫≠p nh·∫≠t:** Th√°ng 6, 2025  
            """)
    
    def _run_budget_allocation_mode(self):
        """Ch·∫°y ch·ª©c nƒÉng ph√¢n b·ªï ng√¢n s√°ch"""
        try:
            # N√∫t quay l·∫°i v·ªõi styling ƒë·∫πp h∆°n
            col1, col2, col3 = st.columns([1, 4, 1])
            with col1:
                if st.button("‚¨ÖÔ∏è Quay l·∫°i Menu", key="back_from_budget", type="secondary"):
                    st.session_state.current_mode = None
                    st.rerun()
            
            st.markdown("""
            <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                        padding: 2rem; border-radius: 15px; margin-bottom: 2rem; color: white; text-align: center;">
                <h2>ü§ñ Ph√¢n b·ªï Ng√¢n s√°ch</h2>
                <p>H·ªá th·ªëng th√¥ng minh ph√¢n t√≠ch d·ªØ li·ªáu v√† ƒë·ªÅ xu·∫•t ph√¢n b·ªï ng√¢n s√°ch t·ªëi ∆∞u</p>
            </div>
            """, unsafe_allow_html=True)
            
            from controller.main_controller import MainController
            
            # Kh·ªüi t·∫°o v√† ch·∫°y controller ch√≠nh
            main_controller = MainController()
            main_controller._handle_main_logic()
            
        except ImportError as e:
            st.error(f"‚ùå L·ªói Import: {str(e)}")
            st.info("üí° Ki·ªÉm tra c√°c file trong th∆∞ m·ª•c model v√† view")
        except AttributeError as e:
            st.error(f"‚ùå L·ªói Method: {str(e)}")
            st.info("üí° Ki·ªÉm tra method _handle_main_logic() trong MainController")
        except Exception as e:
            st.error(f"‚ùå L·ªói kh√°c: {str(e)}")
            
            # Debug info chi ti·∫øt
            with st.expander("üîß Th√¥ng tin Debug chi ti·∫øt"):
                import traceback
                st.code(traceback.format_exc())
    
    def _run_dol_analysis_mode(self):
        """Ch·∫°y ch·ª©c nƒÉng ph√¢n t√≠ch DOL"""
        try:
            # N√∫t quay l·∫°i
            col1, col2, col3 = st.columns([1, 4, 1])
            with col1:
                if st.button("‚¨ÖÔ∏è Quay l·∫°i Menu", key="back_from_dol", type="secondary"):
                    st.session_state.current_mode = None
                    st.rerun()
            
            # Import v√† ch·∫°y DOL controller
            from controller.dol_controller import DolController
            
            dol_controller = DolController()
            dol_controller.run()
            
        except ImportError as e:
            st.error(f"‚ùå L·ªói Import: {str(e)}")
            st.info("üí° Ki·ªÉm tra file dol_controller.py v√† c√°c dependencies")
        except Exception as e:
            st.error(f"‚ùå L·ªói kh√°c: {str(e)}")
            
            # Debug info chi ti·∫øt
            with st.expander("üîß Th√¥ng tin Debug chi ti·∫øt"):
                import traceback
                st.code(traceback.format_exc())
    
    def _run_revenue_analysis_mode(self):
        """Ch·∫°y ch·ª©c nƒÉng ph√¢n t√≠ch doanh thu"""
        try:
            # N√∫t quay l·∫°i v·ªõi styling ƒë·∫πp h∆°n
            col1, col2, col3 = st.columns([1, 4, 1])
            with col1:
                if st.button("‚¨ÖÔ∏è Quay l·∫°i Menu", key="back_from_revenue", type="secondary"):
                    st.session_state.current_mode = None
                    st.rerun()
            
            st.markdown("""
            <div style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); 
                        padding: 2rem; border-radius: 15px; margin-bottom: 2rem; color: white; text-align: center;">
                <h2>üìà Ph√¢n t√≠ch Doanh thu Qu·ªëc gia</h2>
                <p>Ph√¢n t√≠ch chi ti·∫øt doanh thu theo t·ª´ng qu·ªëc gia v√† xu h∆∞·ªõng tƒÉng tr∆∞·ªüng</p>
            </div>
            """, unsafe_allow_html=True)
            
            from controller.app_L import main as revenue_analysis_main
            
            # Ch·∫°y ch·ª©c nƒÉng ph√¢n t√≠ch doanh thu
            revenue_analysis_main()
            
        except ImportError as e:
            st.error(f"‚ùå L·ªói Import: {str(e)}")
            st.info("üí° Ki·ªÉm tra file app_L.py v√† c√°c dependencies")
        except Exception as e:
            st.error(f"‚ùå L·ªói kh√°c: {str(e)}")
            
            # Debug info chi ti·∫øt
            with st.expander("üîß Th√¥ng tin Debug chi ti·∫øt"):
                import traceback
                st.code(traceback.format_exc())
    
    def _run_monthly_revenue_mode(self):
        """Ch·∫°y ch·ª©c nƒÉng ph√¢n t√≠ch doanh thu theo th√°ng"""
        try:
            # N√∫t quay l·∫°i
            col1, col2, col3 = st.columns([1, 4, 1])
            with col1:
                if st.button("‚¨ÖÔ∏è Quay l·∫°i Menu", key="back_from_monthly", type="secondary"):
                    st.session_state.current_mode = None
                    st.rerun()
            
            # Import controller v√† ch·∫°y
            from controller.monthly_revenue_controller import MonthlyRevenueController
            
            monthly_controller = MonthlyRevenueController()
            monthly_controller.run()
            
        except ImportError as e:
            st.error(f"‚ùå L·ªói Import: {str(e)}")
            st.info("üí° Ki·ªÉm tra file monthly_revenue_controller.py v√† c√°c dependencies")
        except Exception as e:
            st.error(f"‚ùå L·ªói kh√°c: {str(e)}")
            
            # Debug info chi ti·∫øt
            with st.expander("üîß Th√¥ng tin Debug chi ti·∫øt"):
                import traceback
                st.code(traceback.format_exc())
