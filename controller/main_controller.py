import streamlit as st
from model.data_model import DataModel, AIModel
from view.ui_components import UIComponents, MainPanelComponents
import os

class MainController:
    """Controller ch√≠nh ƒëi·ªÅu khi·ªÉn lu·ªìng ·ª©ng d·ª•ng"""
    
    def __init__(self):
        self.data_model = DataModel()
        self.ai_model = AIModel()
        
    def run_application(self):
        """Ch·∫°y ·ª©ng d·ª•ng ch√≠nh (standalone mode)"""
        UIComponents.setup_page_config()
        UIComponents.load_custom_css()
        UIComponents.display_main_header()
        
        self._handle_main_logic()
    
    def _handle_main_logic(self):
        """X·ª≠ l√Ω logic ch√≠nh c·ªßa ·ª©ng d·ª•ng"""
        data_path = st.session_state.get('uploaded_data_path', None)
        if data_path is not None and os.path.exists(data_path):
            self._handle_file_uploaded(data_path)
        else:
            st.warning("‚ö†Ô∏è Vui l√≤ng upload file d·ªØ li·ªáu ·ªü dashboard ƒë·ªÉ s·ª≠ d·ª•ng c√°c ch·ª©c nƒÉng ph√¢n t√≠ch!")
    
    def _handle_file_uploaded(self, data_path):
        """X·ª≠ l√Ω khi file ƒë∆∞·ª£c upload (data_path)"""
        time_frame_months = MainPanelComponents.display_time_frame_selector()
        df_clean = DataModel.load_and_clean_data(data_path, time_frame_months)
        if df_clean is not None:
            self._process_data_analysis(df_clean, time_frame_months)
    
    def _process_data_analysis(self, df_clean, time_frame_months):
        """X·ª≠ l√Ω ph√¢n t√≠ch d·ªØ li·ªáu"""
        available_countries = sorted(df_clean['Country'].unique())
        excluded_countries, excluded_products = MainPanelComponents.display_exclusion_lists(available_countries)
        
        self._display_exclusion_info(excluded_countries, excluded_products)
        
        df_clean = DataModel.filter_excluded_items(df_clean, excluded_countries, excluded_products)
        
        country_stats = DataModel.get_country_selection_options(df_clean, time_frame_months)
        
        country_criteria, num_countries = MainPanelComponents.display_country_selection()
        total_budget, expected_roi = MainPanelComponents.display_budget_parameters()
        min_per_country, max_per_country = MainPanelComponents.display_budget_constraints(total_budget, num_countries)
        
        if MainPanelComponents.display_analyze_button():
            self._run_analysis(
                df_clean, country_stats, country_criteria, num_countries, 
                time_frame_months, total_budget, expected_roi, 
                min_per_country, max_per_country,
                excluded_countries, excluded_products
            )
    
    def _display_exclusion_info(self, excluded_countries, excluded_products):
        """Hi·ªÉn th·ªã th√¥ng tin v·ªÅ c√°c item b·ªã lo·∫°i tr·ª´"""
        if excluded_countries:
            st.info(f"üö´ ƒê√£ lo·∫°i tr·ª´ {len(excluded_countries)} qu·ªëc gia: {', '.join(excluded_countries)}")
        
        if excluded_products:
            st.info(f"üö´ ƒê√£ lo·∫°i tr·ª´ {len(excluded_products)} s·∫£n ph·∫©m")
    
    def _run_analysis(self, df_clean, country_stats, country_criteria, num_countries, 
                     time_frame_months, total_budget, expected_roi, 
                     min_per_country, max_per_country,
                     excluded_countries, excluded_products):
        """Ch·∫°y ph√¢n t√≠ch v√† hi·ªÉn th·ªã k·∫øt qu·∫£"""
        
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        try:
            # B∆∞·ªõc 1: L·ªçc qu·ªëc gia
            status_text.text("üîç ƒêang l·ªçc qu·ªëc gia theo ti√™u ch√≠...")
            progress_bar.progress(20)
            
            selected_countries = DataModel.filter_countries_by_criteria(
                country_stats, country_criteria, num_countries
            )
            
            # B∆∞·ªõc 2: Ph√¢n t√≠ch chi ti·∫øt
            status_text.text("üåç ƒêang ph√¢n t√≠ch chi ti·∫øt c√°c qu·ªëc gia...")
            progress_bar.progress(40)
            
            country_analysis_with_products, top_products_by_country = DataModel.analyze_countries_with_products(
                df_clean, selected_countries, time_frame_months
            )
            
            # B∆∞·ªõc 3: Ph√¢n b·ªï ng√¢n s√°ch
            status_text.text("üí∞ ƒêang ph√¢n b·ªï ng√¢n s√°ch...")
            progress_bar.progress(60)
            
            allocation_df = DataModel.allocate_budget_by_country(
                country_analysis_with_products, total_budget, min_per_country, max_per_country, expected_roi
            )
            
            # B∆∞·ªõc 4: T·∫°o khuy·∫øn ngh·ªã chi·∫øn l∆∞·ª£c
            status_text.text("ƒêang t·∫°o khuy·∫øn ngh·ªã chi·∫øn l∆∞·ª£c...")
            progress_bar.progress(80)
            
            ai_recommendations = AIModel.generate_static_strategy_recommendations(
                allocation_df, total_budget, expected_roi, time_frame_months
            )
            
            progress_bar.progress(100)
            progress_bar.empty()
            status_text.empty()
            
            st.success("‚úÖ Ph√¢n t√≠ch ho√†n th√†nh!")
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            self._display_results(
                time_frame_months, selected_countries, total_budget, expected_roi,
                excluded_countries, excluded_products, country_stats, allocation_df,
                min_per_country, max_per_country, ai_recommendations
            )
            
        except Exception as e:
            progress_bar.empty()
            status_text.empty()
            st.error(f"‚ùå L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch: {str(e)}")
    
    def _display_results(self, time_frame_months, selected_countries, total_budget, expected_roi,
                        excluded_countries, excluded_products, country_stats, allocation_df,
                        min_per_country, max_per_country, ai_recommendations):
        """Hi·ªÉn th·ªã t·∫•t c·∫£ k·∫øt qu·∫£ ph√¢n t√≠ch"""
        
        # Hi·ªÉn th·ªã th√¥ng tin c·∫•u h√¨nh
        UIComponents.display_config_info(
            time_frame_months, selected_countries, total_budget, expected_roi,
            excluded_countries, excluded_products
        )
        
        # Hi·ªÉn th·ªã danh s√°ch qu·ªëc gia ƒë∆∞·ª£c ch·ªçn
        UIComponents.display_selected_countries(selected_countries, country_stats)
        
        # Hi·ªÉn th·ªã metrics t·ªïng quan
        UIComponents.display_budget_metrics(selected_countries, total_budget, allocation_df)
        
        # Hi·ªÉn th·ªã b·∫£ng ph√¢n t√≠ch chi ti·∫øt
        UIComponents.display_detailed_analysis_table(allocation_df, time_frame_months)
        
        # Hi·ªÉn th·ªã b·∫£ng ph√¢n b·ªï ng√¢n s√°ch
        UIComponents.display_budget_allocation_table(
            allocation_df, min_per_country, max_per_country, expected_roi
        )
        
        # Hi·ªÉn th·ªã khuy·∫øn ngh·ªã chi·∫øn l∆∞·ª£c
        UIComponents.display_ai_recommendations(ai_recommendations)
        
        # Hi·ªÉn th·ªã section download
        UIComponents.display_download_section(allocation_df, time_frame_months, ai_recommendations) 