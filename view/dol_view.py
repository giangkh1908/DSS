import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import numpy as np
from typing import Any, Dict, List

class DolView:
    """View for DOL (Degree of Operating Leverage) analysis interface"""
    
    def render_header(self):
        """Render main header"""
        st.markdown("""
        <div style="background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%); 
                    padding: 2rem; border-radius: 15px; margin-bottom: 2rem; color: white; text-align: center;">
            <h2>üî¢ Ph√¢n t√≠ch DOL - Degree of Operating Leverage</h2>
            <p>D·ª± ƒëo√°n v√† ph√¢n t√≠ch ƒë·ªô nh·∫°y c·∫£m ho·∫°t ƒë·ªông c·ªßa doanh nghi·ªáp</p>
        </div>
        """, unsafe_allow_html=True)
    
    def render_navigation(self, current_page: str, has_results: bool) -> str:
        """Render navigation sidebar"""
        page = st.sidebar.selectbox(
            "Ch·ªçn trang",
            ["input", "results"],
            index=0 if current_page == "input" else 1,
            format_func=lambda x: "Nh·∫≠p li·ªáu" if x == "input" else "K·∫øt qu·∫£",
            disabled=not has_results if current_page == "input" else False
        )
        return page
    
    def render_input_header(self):
        """Render input page header"""
        st.header("Nh·∫≠p th√¥ng tin ƒë·ªÉ t√≠nh DOL")
    
    def render_input_form(self, available_products: List[str], available_years: List[int]) -> Dict[str, Any]:
        """Render input form and return collected data"""
        # Create three columns for better layout
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.subheader("Th√¥ng tin chi ph√≠")
            
            # Variable Cost Input
            variable_cost = st.number_input(
                "Chi ph√≠ bi·∫øn ƒë·ªïi($):",
                min_value=0.0,
                value=10.0,
                step=0.1,
                help="Chi ph√≠ bi·∫øn ƒë·ªïi tr√™n m·ªói ƒë∆°n v·ªã s·∫£n ph·∫©m"
            )
            
            # Fixed Cost Input
            fixed_cost = st.number_input(
                "Chi ph√≠ c·ªë ƒë·ªãnh($):",
                min_value=0.0,
                value=1000.0,
                step=10.0,
                help="Chi ph√≠ c·ªë ƒë·ªãnh t·ªïng th·ªÉ"
            )
        
        with col2:
            st.subheader("Th√¥ng tin th·ªùi gian")
            
            # Time Period Selection
            time_period = st.selectbox(
                "Kho·∫£ng th·ªùi gian:",
                ["1 th√°ng t·ªõi", "2 th√°ng t·ªõi", "3 th√°ng t·ªõi"],
                index=0
            )
            
            # Year Selection for Monthly Analysis
            if available_years:
                selected_year = st.selectbox(
                    "NƒÉm ph√¢n t√≠ch theo th√°ng:",
                    available_years,
                    index=len(available_years)-1,
                    help="Ch·ªçn nƒÉm ƒë·ªÉ xem ph√¢n t√≠ch DOL theo t·ª´ng th√°ng"
                )
            else:
                selected_year = None
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu theo nƒÉm")
        
        with col3:
            st.subheader("Ch·ªçn s·∫£n ph·∫©m")
            
            # Product Search
            search_term = st.text_input(
                "T√¨m ki·∫øm s·∫£n ph·∫©m:",
                placeholder="Nh·∫≠p m√£ s·∫£n ph·∫©m...",
                help="T√¨m ki·∫øm theo m√£ s·∫£n ph·∫©m"
            )
            
            # Filter products based on search term
            if search_term:
                filtered_products = [p for p in available_products if search_term.lower() in str(p).lower()]
            else:
                filtered_products = available_products[:100]  # Limit for performance
            
            # Product Selection
            if filtered_products:
                product_code = st.selectbox(
                    "Ch·ªçn m√£ s·∫£n ph·∫©m:",
                    filtered_products,
                    index=0
                )
            else:
                if search_term:
                    st.warning("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p.")
                else:
                    st.warning("Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o.")
                product_code = None
        
        return {
            'variable_cost': variable_cost,
            'fixed_cost': fixed_cost,
            'time_period': time_period,
            'selected_year': selected_year,
            'product_code': product_code
        }
    
    def render_calculate_button(self) -> bool:
        """Render calculate button and return if clicked"""
        return st.button("T√≠nh DOL", type="primary", use_container_width=True)
    
    def render_results_header(self):
        """Render results page header"""
        st.header("K·∫øt qu·∫£ ph√¢n t√≠ch DOL")
    
    def render_summary_table(self, results: Dict[str, Any], model: Any):
        """Render summary table with DOL forecasts"""
        st.subheader("üìã B·∫£ng t√≥m t·∫Øt DOL")
        
        time_period = results.get('time_period', '1 th√°ng t·ªõi')
        base_dol = results.get('dol', 0)
        product_code = results.get('product_code', '')
        variable_cost = results.get('variable_cost', 0)
        fixed_cost = results.get('fixed_cost', 0)
        selected_year = results.get('selected_year', 2011)
        
        # Get monthly DOL data for reference
        monthly_dol_data = model.get_monthly_dol_data(product_code, variable_cost, fixed_cost, selected_year)
        
        # Display reference information
        if monthly_dol_data:
            available_months = sorted(monthly_dol_data.keys())
            if available_months:
                most_recent_month = available_months[-1]
                most_recent_dol = monthly_dol_data[most_recent_month]
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.info(f"üìÖ **Th√°ng g·∫ßn nh·∫•t c√≥ d·ªØ li·ªáu:** {most_recent_month}")
                with col2:
                    st.info(f"üìä **DOL th√°ng {most_recent_month}:** {most_recent_dol:.3f}")
                with col3:
                    st.info(f"üìà **NƒÉm ph√¢n t√≠ch:** {selected_year}")
        
        # Determine number of months to show
        months_to_show = 1
        if '3' in time_period:
            months_to_show = 3
        elif '2' in time_period:
            months_to_show = 2
        
        # Create table data
        table_data = []
        for month in range(1, months_to_show + 1):
            time_text = f"{month} th√°ng t·ªõi"
            dol_value = base_dol * (1 + (month - 1) * 0.1)
            sensitivity = self._get_sensitivity_level(dol_value)
            comparison = self._get_comparison_text(month, dol_value, model, product_code, variable_cost, fixed_cost, selected_year)
            
            # Get strategic focus based on DOL
            if dol_value > 0.5:
                analysis = "TƒÉng tr∆∞·ªüng m·∫°nh - M·ªü r·ªông th·ªã ph·∫ßn, qu·∫£ng c√°o t√≠ch c·ª±c"
            elif dol_value == 0.5:
                analysis = "C√¢n b·∫±ng - K·∫øt h·ª£p gi·ªØ ch√¢n KH c≈© v√† m·ªü r·ªông m·ªõi"
            else:
                analysis = "B·ªÅn v·ªØng - Marketing ti·∫øt ki·ªám, t·∫≠p trung gi√° tr·ªã c·ªët l√µi"
            
            table_data.append({
                "Th·ªùi gian": time_text,
                "DOL": f"{dol_value:.2f}",
                "ƒê·ªô nh·∫°y c·∫£m": sensitivity,
                "So v·ªõi th√°ng g·∫ßn nh·∫•t": comparison,
                "ƒê·ªãnh h∆∞·ªõng chi·∫øn l∆∞·ª£c": analysis
            })
        
        # Display table
        df_table = pd.DataFrame(table_data)
        st.dataframe(df_table, use_container_width=True)
    
    def render_dol_chart(self, results: Dict[str, Any]):
        """Render DOL chart showing monthly data"""
        st.subheader("üìà Bi·ªÉu ƒë·ªì DOL theo t·ª´ng th√°ng")
        
        try:
            monthly_dol_data = results.get('monthly_dol_data', {})
            product_code = results.get('product_code', '')
            selected_year = results.get('selected_year', 'N/A')
            
            if not monthly_dol_data:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu DOL theo th√°ng ƒë·ªÉ hi·ªÉn th·ªã.")
                st.info("üí° L∆∞u √Ω: D·ªØ li·ªáu c√≥ th·ªÉ kh√¥ng c√≥ ƒë·ªß th√¥ng tin theo th√°ng ho·∫∑c s·∫£n ph·∫©m kh√¥ng c√≥ ho·∫°t ƒë·ªông trong nƒÉm ƒë∆∞·ª£c ch·ªçn.")
                return
            
            # Create the chart
            months = list(monthly_dol_data.keys())
            dol_values = list(monthly_dol_data.values())
            
            fig = go.Figure()
            
            fig.add_trace(go.Scatter(
                x=months,
                y=dol_values,
                mode='lines+markers',
                name='DOL',
                line=dict(color='blue', width=3),
                marker=dict(size=8, color='blue')
            ))
            
            fig.update_layout(
                title=f'DOL theo t·ª´ng th√°ng nƒÉm {selected_year} - S·∫£n ph·∫©m: {product_code}',
                xaxis_title='Th√°ng',
                yaxis_title='DOL',
                xaxis=dict(tickmode='array', tickvals=list(range(1, 13)), ticktext=[
                    'T1', 'T2', 'T3', 'T4', 'T5', 'T6',
                    'T7', 'T8', 'T9', 'T10', 'T11', 'T12'
                ]),
                height=500,
                showlegend=False
            )
            
            # Add horizontal lines for sensitivity levels
            fig.add_hline(y=0.5, line_dash="dash", line_color="orange", 
                        annotation_text="Ng∆∞·ª°ng trung b√¨nh (0.5)")
            fig.add_hline(y=0.3, line_dash="dash", line_color="green", 
                        annotation_text="Ng∆∞·ª°ng th·∫•p (< 0.5)")
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Show summary statistics
            if dol_values:
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("DOL trung b√¨nh", f"{np.mean(dol_values):.2f}")
                with col2:
                    st.metric("DOL cao nh·∫•t", f"{max(dol_values):.2f}")
                with col3:
                    st.metric("DOL th·∫•p nh·∫•t", f"{min(dol_values):.2f}")
                
                st.info(f"üìä D·ªØ li·ªáu hi·ªÉn th·ªã cho nƒÉm {selected_year} - {len(months)} th√°ng c√≥ d·ªØ li·ªáu")
            
        except Exception as e:
            st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì: {str(e)}")
    
    def render_detailed_analysis(self, results: Dict[str, Any], model: Any):
        """Render detailed analysis sections"""
        st.subheader("üîç Ph√¢n t√≠ch chi ti·∫øt")
        
        time_period = results.get('time_period', '1 th√°ng t·ªõi')
        base_dol = results.get('dol', 0)
        product_code = results.get('product_code', '')
        variable_cost = results.get('variable_cost', 0)
        fixed_cost = results.get('fixed_cost', 0)
        selected_year = results.get('selected_year', 2011)
        
        # Determine number of months to analyze
        months_to_analyze = 1
        if '3' in time_period:
            months_to_analyze = 3
        elif '2' in time_period:
            months_to_analyze = 2
        
        for month in range(1, months_to_analyze + 1):
            with st.expander(f"Ph√¢n t√≠ch th√°ng {month}", expanded=(month == 1)):
                dol_value = base_dol * (1 + (month - 1) * 0.1)
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**Th√¥ng tin DOL:**")
                    st.write(f"- Gi√° tr·ªã DOL: {dol_value:.2f}")
                    st.write(f"- ƒê·ªô nh·∫°y c·∫£m: {self._get_sensitivity_level(dol_value)}")
                    st.write(f"- So v·ªõi th√°ng g·∫ßn nh·∫•t: {self._get_comparison_text(month, dol_value, model, product_code, variable_cost, fixed_cost, selected_year)}")
                
                with col2:
                    st.markdown("**Khuy·∫øn ngh·ªã chi·∫øn l∆∞·ª£c:**")
                    strategies = self._get_strategies_text(dol_value)
                    st.write(strategies)
                
                st.markdown("**Ghi ch√∫:**")
                st.write(self._get_note_text(dol_value))
    
    def _get_sensitivity_level(self, dol_value: float) -> str:
        """Determine sensitivity level based on DOL value"""
        if dol_value > 0.5:
            return "Cao"
        elif dol_value == 0.5:
            return "Trung b√¨nh"
        else:
            return "Th·∫•p"
    
    def _get_comparison_text(self, month: int, dol_value: float, model: Any, product_code: str, variable_cost: float, fixed_cost: float, selected_year: int) -> str:
        """Get comparison text by comparing with actual DOL from previous month"""
        try:
            monthly_dol_data = model.get_monthly_dol_data(product_code, variable_cost, fixed_cost, selected_year)
            
            if not monthly_dol_data:
                return "Kh√¥ng ƒë·ªïi"
            
            available_months = sorted(monthly_dol_data.keys())
            if len(available_months) < 2:
                return "Kh√¥ng ƒë·ªïi"
            
            previous_month = available_months[-2]
            actual_previous_dol = monthly_dol_data[previous_month]
            
            if dol_value > actual_previous_dol * 1.1:
                return "Cao h∆°n"
            elif dol_value < actual_previous_dol * 0.9:
                return "Th·∫•p h∆°n"
            else:
                return "Kh√¥ng ƒë·ªïi"
                
        except Exception:
            if dol_value > 0.5:
                return "Cao h∆°n"
            elif dol_value < 0.5:
                return "Th·∫•p h∆°n"
            else:
                return "Kh√¥ng ƒë·ªïi"
    
    def _get_strategies_text(self, dol_value: float) -> str:
        """Get strategic recommendations based on DOL"""
        if dol_value > 0.5:
            return """**DOL Cao (> 0.5):**

‚Ä¢ TƒÉng t·ªëc ƒë·ªô m·ªü r·ªông th·ªã ph·∫ßn
‚Ä¢ ƒê·∫ßu t∆∞ m·∫°nh v√†o qu·∫£ng c√°o (Facebook Ads, Google, Influencer)
‚Ä¢ T·∫°o s·ª± kh√°c bi·ªát s·∫£n ph·∫©m
‚Ä¢ H·ªó tr·ª£ h·∫≠u m√£i t·ªët ƒë·ªÉ gi·ªØ ch√¢n kh√°ch h√†ng"""
        elif dol_value == 0.5:
            return """**DOL Trung b√¨nh (= 0.5):**

‚Ä¢ K·∫øt h·ª£p gi·ªØa gi·ªØ ch√¢n kh√°ch h√†ng c≈© v√† m·ªü r·ªông m·ªõi
‚Ä¢ Ch·∫°y c√°c chi·∫øn d·ªãch khuy·∫øn m√£i nh·∫π theo m√πa
‚Ä¢ T·∫≠p trung tr·∫£i nghi·ªám ng∆∞·ªùi d√πng v√† s·ª± h√†i l√≤ng
‚Ä¢ TƒÉng ph√¢n t√≠ch h√†nh vi kh√°ch h√†ng"""
        else:
            return """**DOL Th·∫•p (< 0.5):**

‚Ä¢ Marketing ti·∫øt ki·ªám, d·ª±a tr√™n truy·ªÅn mi·ªáng, c·ªông ƒë·ªìng, TikTok, Zalo, fanpage
‚Ä¢ ChƒÉm s√≥c kh√°ch h√†ng, t·∫°o l√≤ng trung th√†nh
‚Ä¢ T·∫≠p trung v√†o gi√° tr·ªã truy·ªÅn th·ªëng, ngu·ªìn g·ªëc nguy√™n li·ªáu, c√¢u chuy·ªán s·∫£n ph·∫©m"""
    
    def _get_note_text(self, dol_value: float) -> str:
        """Get additional notes"""
        if dol_value > 0.5:
            return "DOL cao cho th·∫•y doanh nghi·ªáp r·∫•t nh·∫°y c·∫£m v·ªõi thay ƒë·ªïi doanh s·ªë. C·∫ßn th·∫≠n tr·ªçng trong qu·∫£n l√Ω r·ªßi ro v√† t·∫≠p trung v√†o chi·∫øn l∆∞·ª£c tƒÉng tr∆∞·ªüng m·∫°nh m·∫Ω."
        elif dol_value == 0.5:
            return "DOL ·ªü m·ª©c trung b√¨nh, ph√π h·ª£p cho ho·∫°t ƒë·ªông kinh doanh ·ªïn ƒë·ªãnh v·ªõi chi·∫øn l∆∞·ª£c c√¢n b·∫±ng gi·ªØa tƒÉng tr∆∞·ªüng v√† ·ªïn ƒë·ªãnh."
        else:
            return "DOL th·∫•p cho th·∫•y doanh nghi·ªáp √≠t nh·∫°y c·∫£m v·ªõi thay ƒë·ªïi doanh s·ªë, ph√π h·ª£p v·ªõi chi·∫øn l∆∞·ª£c b·ªÅn v·ªØng v√† t·∫≠p trung v√†o gi√° tr·ªã c·ªët l√µi." 