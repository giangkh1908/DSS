import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime

class UIComponents:
    """View class ch·ª©a t·∫•t c·∫£ UI components v√† layout"""
    
    @staticmethod
    def setup_page_config():
        """C·∫•u h√¨nh trang Streamlit"""
        st.set_page_config(
            page_title="DSS - Ph√¢n B·ªï Ng√¢n S√°ch Marketing Theo Qu·ªëc Gia",
            page_icon="üåç",
            layout="wide",
            initial_sidebar_state="expanded"
        )
    
    @staticmethod
    def load_custom_css():
        """Load custom CSS styles"""
        st.markdown("""
        <style>
            .main-header {
                font-size: 3rem;
                font-weight: bold;
                text-align: center;
                background: linear-gradient(90deg, #1f77b4, #2e8b57);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                margin-bottom: 2rem;
            }
            
            .metric-card {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                padding: 1.5rem;
                border-radius: 15px;
                color: white;
                text-align: center;
                box-shadow: 0 4px 15px rgba(0,0,0,0.1);
                margin: 0.5rem 0;
            }
            
            .country-card {
                background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
                padding: 1.5rem;
                border-radius: 15px;
                color: white;
                margin: 1rem 0;
            }
            
            .analysis-table {
                background: white;
                padding: 1.5rem;
                border-radius: 15px;
                box-shadow: 0 4px 15px rgba(0,0,0,0.1);
                margin: 1rem 0;
            }
            
            .investment-level {
                padding: 1rem;
                margin: 0.5rem 0;
                border-radius: 10px;
                border-left: 5px solid;
            }
            
            .high-investment {
                background-color: #e8f5e8;
                border-left-color: #4caf50;
            }
            
            .medium-investment {
                background-color: #fff3cd;
                border-left-color: #ffc107;
            }
            
            .low-investment {
                background-color: #f8d7da;
                border-left-color: #dc3545;
            }
            
            .recommendation-card {
                background: linear-gradient(135deg, #a8e6cf 0%, #88d8c0 100%);
                padding: 1.5rem;
                border-radius: 15px;
                color: #2c3e50;
                margin: 1rem 0;
                border-left: 5px solid #27ae60;
            }
            
            .ai-recommendation {
                background: linear-gradient(135deg, #ffd89b 0%, #19547b 100%);
                padding: 2rem;
                border-radius: 15px;
                color: black;
                margin: 1.5rem 0;
                border-left: 5px solid #ff6b6b;
            }
        </style>
        """, unsafe_allow_html=True)
    
    @staticmethod
    def display_main_header():
        """Hi·ªÉn th·ªã header ch√≠nh"""
        st.markdown('<h1 class="main-header">üåç DSS - Ph√¢n B·ªï Ng√¢n S√°ch Theo Qu·ªëc Gia</h1>', 
                    unsafe_allow_html=True)
    
    @staticmethod
    def display_welcome_screen():
        """Hi·ªÉn th·ªã m√†n h√¨nh ch√†o m·ª´ng khi ch∆∞a upload file"""
        st.markdown("""
        <div class="recommendation-card">
            <h2>üåç DSS Marketing Intelligence - Country Focus</h2>
            <p><strong>H·ªá th·ªëng ph√¢n b·ªï ng√¢n s√°ch t·∫≠p trung theo qu·ªëc gia</strong></p>
            <h4>üîß H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:</h4>
            <ol>
                <li>üìÅ Upload file CSV d·ªØ li·ªáu b√°n h√†ng</li>
                <li>üìÖ Ch·ªçn khung th·ªùi gian ph√¢n t√≠ch (3-24 th√°ng)</li>
                <li>üö´ Thi·∫øt l·∫≠p danh s√°ch lo·∫°i tr·ª´ (n·∫øu c√≥)</li>
                <li>‚öôÔ∏è C·∫•u h√¨nh tham s·ªë ng√¢n s√°ch v√† ROI</li>
                <li>üöÄ B·∫Øt ƒë·∫ßu ph√¢n t√≠ch v√† nh·∫≠n k·∫øt qu·∫£</li>
            </ol>
        
        </div>
        """, unsafe_allow_html=True)
    
    @staticmethod
    def display_config_info(time_frame_months, selected_countries, total_budget, expected_roi, excluded_countries, excluded_products):
        """Hi·ªÉn th·ªã th√¥ng tin c·∫•u h√¨nh ph√¢n t√≠ch"""
        st.markdown("## ‚öôÔ∏è C·∫•u H√¨nh Ph√¢n T√≠ch")
        config_col1, config_col2, config_col3 = st.columns(3)
        
        with config_col1:
            st.info(f"üìÖ **Khung th·ªùi gian:** {time_frame_months} th√°ng g·∫ßn nh·∫•t")
            st.info(f"üåç **S·ªë qu·ªëc gia:** {len(selected_countries)}")
        
        with config_col2:
            st.info(f"üí∞ **T·ªïng ng√¢n s√°ch:** ${total_budget:,}")
            st.info(f"üìà **ROI d·ª± ki·∫øn:** {expected_roi}%")
        
        with config_col3:
            st.info(f"üö´ **Qu·ªëc gia lo·∫°i tr·ª´:** {len(excluded_countries)}")
            st.info(f"üö´ **S·∫£n ph·∫©m lo·∫°i tr·ª´:** {len(excluded_products)}")
    
    @staticmethod
    def display_selected_countries(selected_countries, country_stats):
        """Hi·ªÉn th·ªã danh s√°ch qu·ªëc gia ƒë∆∞·ª£c ch·ªçn"""
        st.markdown("## üìã Danh S√°ch Qu·ªëc Gia ƒê∆∞·ª£c Ph√¢n T√≠ch")
        
        cols = st.columns(4)
        for i, country in enumerate(selected_countries):
            with cols[i % 4]:
                country_info = country_stats[country_stats['Country'] == country].iloc[0]
                st.markdown(f"""
                <div class="country-card">
                    <h4>üåç {country}</h4>
                    <p><strong>Doanh thu:</strong> ${country_info['Total_Revenue']:,.0f}</p>
                    <p><strong>ƒê∆°n h√†ng:</strong> {country_info['Order_Count']:,}</p>
                </div>
                """, unsafe_allow_html=True)
    
    @staticmethod
    def display_budget_metrics(selected_countries, total_budget, allocation_df):
        """Hi·ªÉn th·ªã metrics t·ªïng quan ng√¢n s√°ch"""
        st.markdown("## üìä T·ªïng Quan Ng√¢n S√°ch")
        
        col1, col2, col3, col4, col5 = st.columns(5)
        
        with col1:
            st.markdown(f"""
            <div class="metric-card">
                <h3>üåç</h3>
                <h2>{len(selected_countries)}</h2>
                <p>Qu·ªëc gia</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div class="metric-card">
                <h3>üí∞</h3>
                <h2>${total_budget:,.0f}</h2>
                <p>T·ªïng ng√¢n s√°ch</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            avg_allocation = allocation_df['Allocated_Budget'].mean()
            st.markdown(f"""
            <div class="metric-card">
                <h3>üìä</h3>
                <h2>${avg_allocation:,.0f}</h2>
                <p>Ng√¢n s√°ch TB</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            total_expected_profit = allocation_df['Expected_Profit'].sum()
            st.markdown(f"""
            <div class="metric-card">
                <h3>üíµ</h3>
                <h2>${total_expected_profit:,.0f}</h2>
                <p>L·ª£i nhu·∫≠n d·ª± ki·∫øn</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col5:
            roi_percent = (total_expected_profit / total_budget) * 100
            st.markdown(f"""
            <div class="metric-card">
                <h3>üìà</h3>
                <h2>{roi_percent:.1f}%</h2>
                <p>ROI th·ª±c t·∫ø</p>
            </div>
            """, unsafe_allow_html=True)
    
    @staticmethod
    def display_detailed_analysis_table(allocation_df, time_frame_months):
        """Hi·ªÉn th·ªã b·∫£ng ph√¢n t√≠ch chi ti·∫øt qu·ªëc gia"""
        st.markdown(f"## üìã B·∫£ng Ph√¢n T√≠ch Chi Ti·∫øt Qu·ªëc Gia ({time_frame_months} th√°ng)")
        st.markdown("*Ph√¢n t√≠ch to√†n di·ªán c√°c ch·ªâ s·ªë hi·ªáu su·∫•t kinh doanh c·ªßa t·ª´ng qu·ªëc gia*")
        
        detailed_df = allocation_df[['Country', 'Total_Revenue', 'Avg_Monthly_Revenue', 
                                   'Avg_Orders_Per_Month', 'Revenue_Stability', 
                                   'Overall_Score', 'Risk_Level', 'Investment_Potential']].copy()
        
        detailed_df.columns = [
            'Qu·ªëc Gia', 
            f'T·ªïng Doanh Thu {time_frame_months}T ($)',
            'Doanh Thu TB/Th√°ng ($)', 
            'ƒê∆°n H√†ng TB/Th√°ng',
            'ƒê·ªô ·ªîn ƒê·ªãnh Doanh Thu',
            'ƒêi·ªÉm T·ªïng H·ª£p',
            'M·ª©c R·ªßi Ro',
            'Ti·ªÅm NƒÉng ƒê·∫ßu T∆∞'
        ]
        
        detailed_df[f'T·ªïng Doanh Thu {time_frame_months}T ($)'] = detailed_df[f'T·ªïng Doanh Thu {time_frame_months}T ($)'].apply(lambda x: f"${x:,.0f}")
        detailed_df['Doanh Thu TB/Th√°ng ($)'] = detailed_df['Doanh Thu TB/Th√°ng ($)'].apply(lambda x: f"${x:,.0f}")
        detailed_df['ƒê∆°n H√†ng TB/Th√°ng'] = detailed_df['ƒê∆°n H√†ng TB/Th√°ng'].apply(lambda x: f"{x:.1f}")
        detailed_df['ƒê·ªô ·ªîn ƒê·ªãnh Doanh Thu'] = detailed_df['ƒê·ªô ·ªîn ƒê·ªãnh Doanh Thu'].apply(lambda x: f"{x:.2f}")
        detailed_df['ƒêi·ªÉm T·ªïng H·ª£p'] = detailed_df['ƒêi·ªÉm T·ªïng H·ª£p'].apply(lambda x: f"{x:.1f}/10")
        
        st.dataframe(detailed_df, use_container_width=True, hide_index=True)
        
        UIComponents.display_analysis_explanation()
    
    @staticmethod
    def display_analysis_explanation():
        """Hi·ªÉn th·ªã gi·∫£i th√≠ch c√°c ch·ªâ s·ªë ph√¢n t√≠ch"""
        with st.expander("üìñ Gi·∫£i Th√≠ch C√°c Ch·ªâ S·ªë Ph√¢n T√≠ch"):
            st.markdown("""
            **üîç √ù nghƒ©a c√°c ch·ªâ s·ªë:**
            
            ‚Ä¢ **T·ªïng Doanh Thu:** T·ªïng doanh thu c·ªßa qu·ªëc gia trong khung th·ªùi gian ph√¢n t√≠ch
            
            ‚Ä¢ **Doanh Thu TB/Th√°ng:** Doanh thu trung b√¨nh m·ªói th√°ng, cho bi·∫øt quy m√¥ th·ªã tr∆∞·ªùng
            
            ‚Ä¢ **ƒê∆°n H√†ng TB/Th√°ng:** S·ªë ƒë∆°n h√†ng trung b√¨nh m·ªói th√°ng, th·ªÉ hi·ªán m·ª©c ƒë·ªô ho·∫°t ƒë·ªông th·ªã tr∆∞·ªùng (>50 = s√¥i ƒë·ªông, >100 = r·∫•t s√¥i ƒë·ªông)
            
            ‚Ä¢ **ƒê·ªô ·ªîn ƒê·ªãnh Doanh Thu:** Ch·ªâ s·ªë ·ªïn ƒë·ªãnh doanh thu theo th√°ng (>0.5 = ·ªïn ƒë·ªãnh, >1.0 = r·∫•t ·ªïn ƒë·ªãnh)
            
            ‚Ä¢ **ƒêi·ªÉm T·ªïng H·ª£p:** T·ªïng h·ª£p Revenue (50%), Order Frequency (35%), Stability (15%) th√†nh ƒëi·ªÉm t·ª´ 0-10 (>7 = xu·∫•t s·∫Øc, 4-7 = t·ªët, <4 = c·∫ßn c·∫£i thi·ªán)
            
            ‚Ä¢ **M·ª©c R·ªßi Ro:** ƒê√°nh gi√° r·ªßi ro ƒë·∫ßu t∆∞ (Th·∫•p = an to√†n, Trung B√¨nh = c√¢n nh·∫Øc, Cao = th·∫≠n tr·ªçng)
            
            ‚Ä¢ **Ti·ªÅm NƒÉng ƒê·∫ßu T∆∞:** Khuy·∫øn ngh·ªã m·ª©c ƒë·ªô ƒë·∫ßu t∆∞ (Cao = ∆∞u ti√™n, Trung B√¨nh = c√¢n b·∫±ng, Th·∫•p = h·∫°n ch·∫ø)
            """)
    
    @staticmethod
    def display_budget_allocation_table(allocation_df, min_per_country, max_per_country, expected_roi):
        """Hi·ªÉn th·ªã b·∫£ng ph√¢n b·ªï ng√¢n s√°ch chi ti·∫øt"""
        st.markdown("## üí∞ B·∫£ng Ph√¢n B·ªï Ng√¢n S√°ch Chi Ti·∫øt")
        st.markdown("*K·∫ø ho·∫°ch ph√¢n b·ªï ng√¢n s√°ch v√† d·ª± b√°o l·ª£i nhu·∫≠n cho t·ª´ng qu·ªëc gia*")
        
        budget_detailed_df = allocation_df[['Country', 'Overall_Score', 'Allocated_Budget', 'Investment_Percentage', 
                                          'Expected_Profit', 'Total_Return', 'Investment_Level', 'Risk_Level']].copy()
        
        budget_detailed_df.columns = [
            'Qu·ªëc Gia',
            'ƒêi·ªÉm ƒê√°nh Gi√°',
            'Ng√¢n S√°ch ƒê∆∞·ª£c Ph√¢n B·ªï ($)',
            'T·ª∑ L·ªá Ng√¢n S√°ch (%)', 
            'L·ª£i Nhu·∫≠n D·ª± Ki·∫øn ($)',
            'T·ªïng Thu V·ªÅ D·ª± Ki·∫øn ($)',
            'M·ª©c ƒê·ªô ƒê·∫ßu T∆∞',
            'M·ª©c R·ªßi Ro'
        ]
        
        budget_detailed_df['ƒêi·ªÉm ƒê√°nh Gi√°'] = budget_detailed_df['ƒêi·ªÉm ƒê√°nh Gi√°'].apply(lambda x: f"{x:.1f}/10")
        budget_detailed_df['Ng√¢n S√°ch ƒê∆∞·ª£c Ph√¢n B·ªï ($)'] = budget_detailed_df['Ng√¢n S√°ch ƒê∆∞·ª£c Ph√¢n B·ªï ($)'].apply(lambda x: f"${x:,.0f}")
        budget_detailed_df['T·ª∑ L·ªá Ng√¢n S√°ch (%)'] = budget_detailed_df['T·ª∑ L·ªá Ng√¢n S√°ch (%)'].apply(lambda x: f"{x:.1f}%")
        budget_detailed_df['L·ª£i Nhu·∫≠n D·ª± Ki·∫øn ($)'] = budget_detailed_df['L·ª£i Nhu·∫≠n D·ª± Ki·∫øn ($)'].apply(lambda x: f"${x:,.0f}")
        budget_detailed_df['T·ªïng Thu V·ªÅ D·ª± Ki·∫øn ($)'] = budget_detailed_df['T·ªïng Thu V·ªÅ D·ª± Ki·∫øn ($)'].apply(lambda x: f"${x:,.0f}")
        
        st.dataframe(budget_detailed_df, use_container_width=True, hide_index=True)
        
        UIComponents.display_budget_strategy_explanation(min_per_country, max_per_country, expected_roi)
    
    @staticmethod
    def display_budget_strategy_explanation(min_per_country, max_per_country, expected_roi):
        """Hi·ªÉn th·ªã gi·∫£i th√≠ch chi·∫øn l∆∞·ª£c ph√¢n b·ªï ng√¢n s√°ch"""
        with st.expander("üí° Gi·∫£i Th√≠ch Chi·∫øn L∆∞·ª£c Ph√¢n B·ªï Ng√¢n S√°ch"):
            st.markdown(f"""
            **üéØ Nguy√™n t·∫Øc ph√¢n b·ªï ng√¢n s√°ch:**
            
            **1. D·ª±a tr√™n ƒêi·ªÉm ƒê√°nh Gi√° T·ªïng H·ª£p:**
            - Qu·ªëc gia c√≥ ƒëi·ªÉm cao h∆°n s·∫Ω nh·∫≠n ng√¢n s√°ch l·ªõn h∆°n
            - C√¥ng th·ª©c: (ƒêi·ªÉm qu·ªëc gia / T·ªïng ƒëi·ªÉm) √ó T·ªïng ng√¢n s√°ch
            
            **2. √Åp d·ª•ng Gi·ªõi H·∫°n Min/Max:**
            - Ng√¢n s√°ch t·ªëi thi·ªÉu: ${min_per_country:,} cho m·ªói qu·ªëc gia
            - Ng√¢n s√°ch t·ªëi ƒëa: ${max_per_country:,} cho m·ªói qu·ªëc gia
            - ƒê·∫£m b·∫£o kh√¥ng c√≥ qu·ªëc gia n√†o b·ªã b·ªè qu√™n ho·∫∑c chi·∫øm qu√° nhi·ªÅu t√†i nguy√™n
            
            **3. T√≠nh To√°n ROI:**
            - ROI d·ª± ki·∫øn ƒë∆∞·ª£c thi·∫øt l·∫≠p: {expected_roi}%
            - L·ª£i nhu·∫≠n d·ª± ki·∫øn = Ng√¢n s√°ch √ó ({expected_roi}% / 100)
            - T·ªïng thu v·ªÅ = Ng√¢n s√°ch + L·ª£i nhu·∫≠n d·ª± ki·∫øn
            
            **4. Ph√¢n Lo·∫°i M·ª©c ƒê·ªô ƒê·∫ßu T∆∞:**
            - **R·∫•t Cao (‚â•25%):** Th·ªã tr∆∞·ªùng chi·∫øn l∆∞·ª£c, t·∫≠p trung t√†i nguy√™n ch√≠nh
            - **Cao (15-24%):** Th·ªã tr∆∞·ªùng quan tr·ªçng, ƒë·∫ßu t∆∞ m·∫°nh m·∫Ω
            - **Trung B√¨nh (10-14%):** Th·ªã tr∆∞·ªùng ·ªïn ƒë·ªãnh, duy tr√¨ v√† ph√°t tri·ªÉn
            - **Th·∫•p (<10%):** Th·ªã tr∆∞·ªùng th·ª≠ nghi·ªám, ƒë·∫ßu t∆∞ th·∫≠n tr·ªçng
            """)
    
    @staticmethod
    def display_charts(allocation_df, time_frame_months):
        """Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ph√¢n t√≠ch h·ªó tr·ª£ quy·∫øt ƒë·ªãnh ƒë·∫ßu t∆∞"""
        st.markdown(f"## üìä Bi·ªÉu ƒê·ªì H·ªó Tr·ª£ Quy·∫øt ƒë·ªãnh ƒê·∫ßu T∆∞")
        st.markdown("*C√°c bi·ªÉu ƒë·ªì gi√∫p b·∫°n ƒë∆∞a ra quy·∫øt ƒë·ªãnh ƒë·∫ßu t∆∞ th√¥ng minh*")
        
        # T√≠nh to√°n ROI efficiency
        allocation_df['ROI_Efficiency'] = (allocation_df['Expected_Profit'] / allocation_df['Allocated_Budget']) * 100
        
        # 1. BI·ªÇU ƒê·ªí HI·ªÜU QU·∫¢ ƒê·∫¶U T∆Ø (full width)
        st.markdown("### üí∞ Hi·ªáu Qu·∫£ ƒê·∫ßu T∆∞: Ng√¢n S√°ch vs L·ª£i Nhu·∫≠n")
        
        fig1 = go.Figure()
        
        # Th√™m scatter plot cho t·ª´ng qu·ªëc gia
        fig1.add_trace(go.Scatter(
            x=allocation_df['Allocated_Budget'],
            y=allocation_df['Expected_Profit'],
            mode='markers+text',
            marker=dict(
                size=15,
                color=allocation_df['ROI_Efficiency'],
                colorscale='RdYlGn',
                showscale=True,
                colorbar=dict(
                    title="ROI (%)",
                    thickness=15,
                    len=0.8
                )
            ),
            text=allocation_df['Country'],
            textposition='top center',
            name='Qu·ªëc Gia'
        ))
        
        # Th√™m ƒë∆∞·ªùng reference ROI = target
        max_budget = allocation_df['Allocated_Budget'].max()
        target_roi = allocation_df['Expected_Profit'].iloc[0] / allocation_df['Allocated_Budget'].iloc[0]
        
        fig1.add_trace(go.Scatter(
            x=[0, max_budget],
            y=[0, max_budget * target_roi],
            mode='lines',
            line=dict(dash='dash', color='red', width=2),
            name=f'ROI Target Line',
            showlegend=True
        ))
        
        fig1.update_layout(
            xaxis_title='Ng√¢n S√°ch ƒê·∫ßu T∆∞ ($)',
            yaxis_title='L·ª£i Nhu·∫≠n D·ª± Ki·∫øn ($)',
            showlegend=True,
            height=500
        )
        
        st.plotly_chart(fig1, use_container_width=True)
        
        # Insight box cho ROI
        col1, col2, col3 = st.columns(3)
        
        with col1:
            best_roi_country = allocation_df.loc[allocation_df['ROI_Efficiency'].idxmax()]
            st.success(f"üèÜ **Hi·ªáu qu·∫£ cao nh·∫•t**\n{best_roi_country['Country']}\nROI: {best_roi_country['ROI_Efficiency']:.1f}%")
        
        with col2:
            worst_roi_country = allocation_df.loc[allocation_df['ROI_Efficiency'].idxmin()]
            st.error(f"‚ö†Ô∏è **Hi·ªáu qu·∫£ th·∫•p nh·∫•t**\n{worst_roi_country['Country']}\nROI: {worst_roi_country['ROI_Efficiency']:.1f}%")
        
        with col3:
            avg_roi = allocation_df['ROI_Efficiency'].mean()
            above_avg = len(allocation_df[allocation_df['ROI_Efficiency'] > avg_roi])
            st.info(f"üìä **ROI trung b√¨nh**\n{avg_roi:.1f}%\n{above_avg}/{len(allocation_df)} qu·ªëc gia tr√™n TB")
        
        # 2. BI·ªÇU ƒê·ªí PH√ÇN B·ªî NG√ÇN S√ÅCH
        st.markdown("### ü•ß Ph√¢n B·ªï Ng√¢n S√°ch Theo Qu·ªëc Gia")
        
        col4, col5 = st.columns([2, 1])
        
        with col4:
            # Investment level colors
            level_colors = {
                'R·∫•t Cao': '#d62728',   # Red
                'Cao': '#ff7f0e',        # Orange  
                'Trung B√¨nh': '#2ca02c', # Green
                'Th·∫•p': '#1f77b4'        # Blue
            }
            colors_pie = [level_colors.get(level, '#gray') for level in allocation_df['Investment_Level']]
            
            fig2 = go.Figure()
            fig2.add_trace(go.Pie(
                labels=allocation_df['Country'],
                values=allocation_df['Allocated_Budget'],
                marker=dict(colors=colors_pie),
                textinfo='label+percent',
                textfont_size=12,
                hole=0.3
            ))
            
            fig2.update_layout(
                height=400,
                showlegend=True
            )
            
            st.plotly_chart(fig2, use_container_width=True)
        
        with col5:
            st.markdown("### üìã Th·ªëng K√™ Ph√¢n B·ªï")
            
            # Top 3 countries by budget
            top_3_budget = allocation_df.head(3)
            total_top3_budget = top_3_budget['Allocated_Budget'].sum()
            top3_percentage = (total_top3_budget / allocation_df['Allocated_Budget'].sum()) * 100
            
            st.metric(
                "Top 3 qu·ªëc gia chi·∫øm", 
                f"{top3_percentage:.1f}%",
                f"${total_top3_budget:,.0f}"
            )
            
            # Concentration risk
            max_percentage = (allocation_df['Allocated_Budget'].max() / allocation_df['Allocated_Budget'].sum()) * 100
            if max_percentage > 40:
                st.error(f"‚ö†Ô∏è R·ªßi ro t·∫≠p trung cao: {max_percentage:.1f}%")
            elif max_percentage > 25:
                st.warning(f"‚ö° T·∫≠p trung trung b√¨nh: {max_percentage:.1f}%")
            else:
                st.success(f"‚úÖ Ph√¢n b·ªï c√¢n b·∫±ng: {max_percentage:.1f}%")
            
            # Investment level distribution
            st.markdown("**Ph√¢n lo·∫°i ƒë·∫ßu t∆∞:**")
            investment_counts = allocation_df['Investment_Level'].value_counts()
            for level, count in investment_counts.items():
                percentage = (count / len(allocation_df)) * 100
                st.text(f"‚Ä¢ {level}: {count} qu·ªëc gia ({percentage:.0f}%)")
            
            # Risk level distribution
            st.markdown("**Ph√¢n lo·∫°i r·ªßi ro:**")
            risk_counts = allocation_df['Risk_Level'].value_counts()
            for risk, count in risk_counts.items():
                percentage = (count / len(allocation_df)) * 100
                color = "üü¢" if risk == "Th·∫•p" else "üü°" if risk == "Trung B√¨nh" else "üî¥"
                st.text(f"{color} {risk}: {count} ({percentage:.0f}%)")
    
    @staticmethod
    def display_ai_recommendations(ai_recommendations):
        """Hi·ªÉn th·ªã khuy·∫øn ngh·ªã chi·∫øn l∆∞·ª£c chi ti·∫øt v·ªõi format gi·ªëng ph√¢n t√≠ch doanh thu"""
        if not ai_recommendations or len(ai_recommendations) == 0:
            st.warning("‚ö†Ô∏è Kh√¥ng c√≥ khuy·∫øn ngh·ªã chi·∫øn l∆∞·ª£c")
            return
        
        st.markdown("## ü§ñ Khuy·∫øn Ngh·ªã Chi·∫øn L∆∞·ª£c")
        st.markdown("*Ph√¢n t√≠ch th√¥ng minh v√† ƒë·ªÅ xu·∫•t chi·∫øn l∆∞·ª£c ƒë·∫ßu t∆∞ t·ªëi ∆∞u*")
        
        for recommendation in ai_recommendations:
            # Hi·ªÉn th·ªã khuy·∫øn ngh·ªã ch√≠nh
            st.markdown("### üìä Ph√¢n T√≠ch T·ªïng Quan")
            st.write(recommendation['content'])
            
            st.markdown("---")
            
            # Hi·ªÉn th·ªã g·ª£i √Ω ƒë·∫ßu t∆∞ v·ªõi expander gi·ªëng b√™n ph√¢n t√≠ch doanh thu
            with st.expander("üí∞ G·ª¢I √ù ƒê·∫¶U T∆Ø", expanded=False):
                st.write(recommendation['investment_suggestion'])
            
            # Hi·ªÉn th·ªã d·ª± b√°o v·ªõi expander
            with st.expander("üìà D·ª∞ B√ÅO HI·ªÜU QU·∫¢", expanded=False):
                st.write(recommendation['forecast'])
                
                # Th√™m metrics cho d·ª± b√°o (gi·ªëng nh∆∞ b√™n ph√¢n t√≠ch doanh thu)
                col1, col2 = st.columns(2)
                
                # Parse ROI numbers t·ª´ content ƒë·ªÉ hi·ªÉn th·ªã metrics
                content = recommendation['forecast']
                try:
                    # Extract ROI values t·ª´ text
                    import re
                    roi_matches = re.findall(r'(\d+\.?\d*)%', content)
                    if len(roi_matches) >= 2:
                        base_roi = float(roi_matches[0])
                        enhanced_roi = float(roi_matches[1])
                        
                        with col1:
                            st.metric(
                                label="Gi·ªØ nguy√™n chi·∫øn l∆∞·ª£c",
                                value=f"{base_roi:.1f}%",
                                delta=f"{base_roi:.1f}% ROI d·ª± ki·∫øn"
                            )
                        with col2:
                            st.metric(
                                label="TƒÉng c∆∞·ªùng ƒë·∫ßu t∆∞ 20%",
                                value=f"{enhanced_roi:.1f}%",
                                delta=f"{enhanced_roi - base_roi:+.1f}% so v·ªõi hi·ªán t·∫°i"
                            )
                except:
                    # Fallback n·∫øu kh√¥ng parse ƒë∆∞·ª£c
                    with col1:
                        st.info("üìä **Chi·∫øn l∆∞·ª£c hi·ªán t·∫°i**\nDuy tr√¨ ph√¢n b·ªï theo khuy·∫øn ngh·ªã")
                    with col2:
                        st.info("üöÄ **Chi·∫øn l∆∞·ª£c tƒÉng c∆∞·ªùng**\nTƒÉng ƒë·∫ßu t∆∞ v√†o top markets")
    
    @staticmethod
    def display_download_section(allocation_df, time_frame_months, ai_recommendations):
        """Hi·ªÉn th·ªã section download k·∫øt qu·∫£"""
        st.markdown("## üíæ T·∫£i K·∫øt Qu·∫£")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            analysis_csv = allocation_df.to_csv(index=False)
            st.download_button(
                "üìä T·∫£i Ph√¢n T√≠ch Chi Ti·∫øt (CSV)",
                analysis_csv,
                f"country_analysis_{time_frame_months}months_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                "text/csv"
            )
        
        with col2:
            budget_allocation_csv = allocation_df[['Country', 'Allocated_Budget', 'Investment_Percentage', 
                                                 'Expected_Profit', 'Investment_Level']].to_csv(index=False)
            st.download_button(
                "üí∞ T·∫£i Ph√¢n B·ªï Ng√¢n S√°ch (CSV)",
                budget_allocation_csv,
                f"budget_allocation_{time_frame_months}months_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                "text/csv"
            )
        
        with col3:
            summary_data = []
            for _, row in allocation_df.iterrows():
                summary_data.append({
                    'Country': row['Country'],
                    'Investment_Level': row['Investment_Level'],
                    'Budget': row['Allocated_Budget'],
                    'Expected_Profit': row['Expected_Profit'],
                    'Risk_Level': row['Risk_Level'],
                    'Analysis_Period': f"{time_frame_months} months"
                })
            
            summary_df = pd.DataFrame(summary_data)
            
            if ai_recommendations:
                ai_rec_text = "\n\n".join([f"{rec['title']}: {rec['content']}" for rec in ai_recommendations])
                summary_df['AI_Recommendations'] = ai_rec_text
            
            summary_csv = summary_df.to_csv(index=False)
            st.download_button(
                "üìã T·∫£i T√≥m T·∫Øt Khuy·∫øn Ngh·ªã (CSV)",
                summary_csv,
                f"investment_recommendations_{time_frame_months}months_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                "text/csv"
            )

    @staticmethod
    def _parse_ai_content(content):
        """Parse n·ªôi dung AI th√†nh c√°c ph·∫ßn ri√™ng bi·ªát"""
        sections = {}
        
        # Chia content th√†nh c√°c ph·∫ßn d·ª±a tr√™n keyword
        if "PORTFOLIO" in content.upper() or "portfolio" in content.lower():
            portfolio_start = content.lower().find("portfolio")
            portfolio_end = content.lower().find("strategy", portfolio_start)
            if portfolio_end == -1:
                portfolio_end = len(content)
            sections["portfolio"] = content[portfolio_start:portfolio_end].strip()
        
        if "STRATEGY" in content.upper() or "chi·∫øn l∆∞·ª£c" in content.lower():
            strategy_start = max(content.lower().find("strategy"), content.lower().find("chi·∫øn l∆∞·ª£c"))
            strategy_end = content.lower().find("result", strategy_start)
            if strategy_end == -1:
                strategy_end = content.lower().find("k·∫øt qu·∫£", strategy_start)
            if strategy_end == -1:
                strategy_end = len(content)
            sections["strategy"] = content[strategy_start:strategy_end].strip()
        
        if "RESULT" in content.upper() or "k·∫øt qu·∫£" in content.lower():
            results_start = max(content.lower().find("result"), content.lower().find("k·∫øt qu·∫£"))
            sections["results"] = content[results_start:].strip()
        
        # N·∫øu kh√¥ng t√¨m th·∫•y section n√†o, return to√†n b·ªô content
        if not sections:
            sections["strategy"] = content
            
        return sections
    
    @staticmethod
    def _extract_strategy_summary(strategy_content):
        """Tr√≠ch xu·∫•t t√≥m t·∫Øt chi·∫øn l∆∞·ª£c ch√≠nh"""
        lines = strategy_content.split('\n')
        summary_lines = []
        
        for line in lines[:5]:  # L·∫•y 5 d√≤ng ƒë·∫ßu
            if line.strip() and len(line.strip()) > 10:
                summary_lines.append(line.strip())
        
        return '\n'.join(summary_lines[:3])  # L·∫•y t·ªëi ƒëa 3 d√≤ng
    
    @staticmethod
    def _extract_key_metrics(results_content):
        """Tr√≠ch xu·∫•t c√°c metrics ch√≠nh t·ª´ k·∫øt qu·∫£"""
        metrics = {}
        
        # T√¨m c√°c patterns ph·ªï bi·∫øn
        lines = results_content.lower().split('\n')
        
        for line in lines:
            if 'revenue' in line or 'doanh thu' in line:
                if '%' in line:
                    import re
                    numbers = re.findall(r'\d+\.?\d*', line)
                    if numbers:
                        metrics['revenue_increase'] = f"{numbers[0]}%"
                        if len(numbers) > 1:
                            metrics['revenue_delta'] = f"+{numbers[1]}%"
            
            if 'roi' in line:
                import re
                numbers = re.findall(r'\d+\.?\d*', line)
                if numbers:
                    metrics['roi_expected'] = f"{numbers[0]}%"
            
            if 'order' in line or 'ƒë∆°n h√†ng' in line:
                import re
                numbers = re.findall(r'\d+\.?\d*', line)
                if numbers:
                    metrics['orders_increase'] = f"{numbers[0]}%"
            
            if 'break-even' in line or 'h√≤a v·ªën' in line:
                import re
                numbers = re.findall(r'\d+', line)
                if numbers:
                    metrics['breakeven_time'] = f"{numbers[0]} th√°ng"
        
        # Default values n·∫øu kh√¥ng t√¨m th·∫•y
        if not metrics:
            metrics = {
                'revenue_increase': '15-25%',
                'roi_expected': '150%',
                'orders_increase': '10-20%',
                'breakeven_time': '6-8 th√°ng'
            }
        
        return metrics
    
    @staticmethod
    def _extract_results_detail(results_content):
        """Tr√≠ch xu·∫•t chi ti·∫øt k·∫øt qu·∫£ c·ª• th·ªÉ"""
        lines = results_content.split('\n')
        detail_lines = []
        
        # L·ªçc c√°c d√≤ng c√≥ th√¥ng tin chi ti·∫øt
        for line in lines:
            if line.strip() and (
                'tƒÉng' in line.lower() or 'increase' in line.lower() or 
                'roi' in line.lower() or 'profit' in line.lower() or
                '%' in line or '$' in line or '¬£' in line
            ):
                detail_lines.append(line.strip())
        
        if not detail_lines:
            detail_lines = [
                "‚Ä¢ D·ª± ki·∫øn tƒÉng doanh thu 15-25% trong 6 th√°ng ƒë·∫ßu",
                "‚Ä¢ ROI trung b√¨nh 150% trong nƒÉm ƒë·∫ßu ti√™n", 
                "‚Ä¢ TƒÉng s·ªë ƒë∆°n h√†ng 10-20% t·ª´ th√°ng th·ª© 3",
                "‚Ä¢ Break-even d·ª± ki·∫øn sau 6-8 th√°ng ƒë·∫ßu t∆∞"
            ]
        
        return '\n'.join(detail_lines[:8])  # L·∫•y t·ªëi ƒëa 8 d√≤ng
    
    @staticmethod
    def _extract_improvement_analysis(results_content):
        """Tr√≠ch xu·∫•t ph√¢n t√≠ch c·∫£i thi·ªán"""
        lines = results_content.split('\n')
        improvement_lines = []
        
        # T√¨m c√°c d√≤ng v·ªÅ c·∫£i thi·ªán, t·ªëi ∆∞u
        for line in lines:
            if line.strip() and (
                'c·∫£i thi·ªán' in line.lower() or 'improvement' in line.lower() or
                't·ªëi ∆∞u' in line.lower() or 'optimize' in line.lower() or
                'n√¢ng cao' in line.lower() or 'enhance' in line.lower()
            ):
                improvement_lines.append(line.strip())
        
        if not improvement_lines:
            improvement_lines = [
                "‚Ä¢ T·ªëi ∆∞u h√≥a channel marketing hi·ªáu qu·∫£ nh·∫•t cho t·ª´ng qu·ªëc gia",
                "‚Ä¢ C·∫£i thi·ªán conversion rate th√¥ng qua personalization",
                "‚Ä¢ N√¢ng cao customer lifetime value th√¥ng qua retention strategy",
                "‚Ä¢ T·ªëi ∆∞u budget allocation d·ª±a tr√™n real-time performance"
            ]
        
        return '\n'.join(improvement_lines[:6])
    
    @staticmethod
    def _extract_logic_explanation(results_content):
        """Tr√≠ch xu·∫•t logic gi·∫£i th√≠ch c√°ch ƒë·∫°t k·∫øt qu·∫£"""
        lines = results_content.split('\n')
        logic_lines = []
        
        # T√¨m c√°c d√≤ng gi·∫£i th√≠ch logic, l√Ω do
        for line in lines:
            if line.strip() and (
                'v√¨' in line.lower() or 'because' in line.lower() or
                'do' in line.lower() or 'due to' in line.lower() or
                'd·ª±a tr√™n' in line.lower() or 'based on' in line.lower() or
                'nh·ªù' in line.lower() or 'thanks to' in line.lower()
            ):
                logic_lines.append(line.strip())
        
        if not logic_lines:
            logic_lines = [
                "‚Ä¢ D·ª±a tr√™n ph√¢n t√≠ch historical data v√† trend patterns",
                "‚Ä¢ √Åp d·ª•ng m√¥ h√¨nh 30-10-60 ƒë√£ ƒë∆∞·ª£c validate trong industry",
                "‚Ä¢ T·∫≠n d·ª•ng seasonal patterns v√† country-specific behaviors",
                "‚Ä¢ S·ª≠ d·ª•ng predictive analytics cho resource allocation",
                "‚Ä¢ K·∫øt h·ª£p market intelligence v·ªõi performance metrics",
                "‚Ä¢ Optimized cho risk-adjusted returns"
            ]
        
        return '\n'.join(logic_lines[:6])

class MainPanelComponents:
    """Class ch·ª©a c√°c component cho main panel (thay th·∫ø sidebar)"""
    
    @staticmethod
    def display_time_frame_selector():
        """Hi·ªÉn th·ªã selector cho khung th·ªùi gian trong main panel"""
        st.markdown("""
        <div class="config-section">
            <h3>üìÖ C·∫•u H√¨nh Th·ªùi Gian</h3>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            time_frame = st.selectbox(
                "Khung th·ªùi gian ph√¢n t√≠ch:",
                [3, 6, 9, 12, 18, 24],
                index=1,
                format_func=lambda x: f"{x} th√°ng g·∫ßn nh·∫•t",
                help="H·ªá th·ªëng s·∫Ω ph√¢n t√≠ch d·ªØ li·ªáu trong kho·∫£ng th·ªùi gian n√†y"
            )
            
            st.info(f"üìä Ph√¢n t√≠ch d·ªØ li·ªáu trong {time_frame} th√°ng g·∫ßn nh·∫•t")
            
        return time_frame
    
    @staticmethod
    def display_exclusion_lists(available_countries):
        """Hi·ªÉn th·ªã danh s√°ch lo·∫°i tr·ª´ trong main panel"""
        st.markdown("""
        <div class="config-section">
            <h3>üö´ Danh S√°ch Lo·∫°i Tr·ª´</h3>
            <p>Ch·ªçn c√°c qu·ªëc gia ho·∫∑c s·∫£n ph·∫©m kh√¥ng mu·ªën ƒë∆∞a v√†o ph√¢n t√≠ch</p>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**üåç Qu·ªëc gia lo·∫°i tr·ª´:**")
            excluded_countries = st.multiselect(
                "Ch·ªçn qu·ªëc gia:",
                available_countries,
                help="C√°c qu·ªëc gia n√†y s·∫Ω b·ªã lo·∫°i kh·ªèi ph√¢n t√≠ch v√† ph√¢n b·ªï ng√¢n s√°ch"
            )
            
            if excluded_countries:
                st.warning(f"‚ö†Ô∏è S·∫Ω lo·∫°i tr·ª´ {len(excluded_countries)} qu·ªëc gia")
        
        with col2:
            st.markdown("**üì¶ S·∫£n ph·∫©m lo·∫°i tr·ª´:**")
            excluded_products_input = st.text_area(
                "M√£ s·∫£n ph·∫©m (m·ªói d√≤ng m·ªôt m√£):",
                help="Nh·∫≠p m√£ s·∫£n ph·∫©m kh√¥ng mu·ªën ph√¢n t√≠ch, m·ªói d√≤ng m·ªôt m√£",
                height=100,
                placeholder="V√≠ d·ª•:\nPOST\nDOT\nCRUK"
            )
            excluded_products = [p.strip() for p in excluded_products_input.split('\n') if p.strip()]
            
            if excluded_products:
                st.warning(f"‚ö†Ô∏è S·∫Ω lo·∫°i tr·ª´ {len(excluded_products)} s·∫£n ph·∫©m")
        
        return excluded_countries, excluded_products
    
    @staticmethod
    def display_country_selection():
        """Hi·ªÉn th·ªã l·ª±a ch·ªçn qu·ªëc gia trong main panel"""
        st.markdown("### üåç Ti√™u Ch√≠ L·ª±a Ch·ªçn Qu·ªëc Gia")
        
        col1, col2 = st.columns(2)
        
        with col1:
            country_criteria = st.selectbox(
                "Ti√™u ch√≠ l·ª±a ch·ªçn:",
                [
                    "Doanh thu cao nh·∫•t",
                    "Nhi·ªÅu ƒë∆°n h√†ng nh·∫•t", 
                    "Nhi·ªÅu kh√°ch h√†ng nh·∫•t",
                    "ROI ti·ªÅm nƒÉng cao nh·∫•t",
                    "TƒÉng tr∆∞·ªüng ·ªïn ƒë·ªãnh"
                ],
                help="C√°ch th·ª©c l·ª±a ch·ªçn qu·ªëc gia ƒë·ªÉ ph√¢n b·ªï ng√¢n s√°ch"
            )
        
        with col2:
            num_countries = st.number_input(
                "S·ªë l∆∞·ª£ng qu·ªëc gia:",
                min_value=1,
                max_value=20,
                value=5,
                help="S·ªë qu·ªëc gia s·∫Ω ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ ph√¢n b·ªï ng√¢n s√°ch"
            )
        
        return country_criteria, num_countries
    
    @staticmethod
    def display_budget_parameters():
        """Hi·ªÉn th·ªã tham s·ªë ng√¢n s√°ch trong main panel"""
        st.markdown("### üí∞ Tham S·ªë Ng√¢n S√°ch")
        
        col1, col2 = st.columns(2)
        
        with col1:
            total_budget = st.number_input(
                "T·ªïng ng√¢n s√°ch ($):",
                min_value=1000,
                max_value=10000000,
                value=100000,
                step=5000,
                help="T·ªïng ng√¢n s√°ch marketing c√≥ th·ªÉ ph√¢n b·ªï"
            )
        
        with col2:
            expected_roi = st.number_input(
                "ROI mong mu·ªën (%):",
                min_value=5.0,
                max_value=500.0,
                value=150.0,
                step=5.0,
                help="T·ª∑ su·∫•t l·ª£i nhu·∫≠n mong mu·ªën tr√™n ƒë·∫ßu t∆∞"
            )
        
        return total_budget, expected_roi
    
    @staticmethod
    def display_budget_constraints(total_budget, num_countries):
        """Hi·ªÉn th·ªã r√†ng bu·ªôc ng√¢n s√°ch trong main panel"""
        st.markdown("### ‚öñÔ∏è R√†ng Bu·ªôc Ph√¢n B·ªï")
        
        col1, col2 = st.columns(2)
        
        with col1:
            min_per_country = st.number_input(
                "Ng√¢n s√°ch t·ªëi thi·ªÉu m·ªói qu·ªëc gia ($):",
                min_value=100,
                max_value=total_budget // num_countries,
                value=min(5000, total_budget // num_countries),
                step=1000,
                help="S·ªë ti·ªÅn t·ªëi thi·ªÉu ph·∫£i ph√¢n b·ªï cho m·ªói qu·ªëc gia"
            )
        
        with col2:
            max_per_country = st.number_input(
                "Ng√¢n s√°ch t·ªëi ƒëa m·ªói qu·ªëc gia ($):",
                min_value=min_per_country,
                max_value=total_budget,
                value=min(50000, total_budget // 2),
                step=5000,
                help="S·ªë ti·ªÅn t·ªëi ƒëa c√≥ th·ªÉ ph√¢n b·ªï cho m·ªôt qu·ªëc gia"
            )
        
        return min_per_country, max_per_country
    
    @staticmethod
    def display_analyze_button():
        """Hi·ªÉn th·ªã n√∫t ph√¢n t√≠ch trong main panel"""
        st.markdown("---")
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            disabled = 'uploaded_data_path' not in st.session_state or not st.session_state['uploaded_data_path']
            return st.button(
                "üöÄ B·∫Øt ƒê·∫ßu Ph√¢n T√≠ch",
                use_container_width=True,
                type="primary",
                help="Click ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√° tr√¨nh ph√¢n t√≠ch v√† ph√¢n b·ªï ng√¢n s√°ch",
                disabled=disabled
            )